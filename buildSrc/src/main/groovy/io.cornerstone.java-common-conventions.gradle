plugins {
	id 'java'
	id 'io.freefair.lombok'
	id 'io.spring.dependency-management'
}

sourceCompatibility = "11"

repositories {
	mavenCentral()
	maven {
		url "${repoUrlPrefix}/maven-public/"
		allowInsecureProtocol true
	}
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
	dependencies {
		dependencySet(group:'org.testcontainers', version: project.properties['testcontainers.version']?:'latest.release') {
			entry 'testcontainers'
			entry 'junit-jupiter'
			entry 'mysql'
			entry 'postgresql'
			entry 'mssqlserver'
			entry 'db2'
			entry 'oracle-xe'
		}
	}
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output
		compileClasspath += sourceSets.test.output
		runtimeClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.test.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
	integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-log4j2"
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
	testRuntimeOnly "com.h2database:h2"
}

configurations.all {
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	exclude group: 'com.google.code.gson', module: 'gson' // introduced by jaeger-client
	exclude group: 'org.glassfish.jaxb', module: 'jaxb-runtime' // introduced by hibernate-core
}

tasks.withType(Test) {
	useJUnitPlatform()
}

java {
	withSourcesJar()
}

jar {
	manifest {
		 attributes(
		 	'Implementation-Title': project.name,
			'Implementation-Version': project.version
		)
	}
}

sourcesJar {
	dependsOn delombok
	from 'build/generated/sources/delombok/java/main/'
	duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

clean {
	doLast {
		project.delete 'bin', 'logs'
	}
}

tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
}

// check.dependsOn integrationTest
