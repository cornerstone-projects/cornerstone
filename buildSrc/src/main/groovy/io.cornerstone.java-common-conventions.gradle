plugins {
	id 'java'
	id 'checkstyle'
	id 'io.freefair.lombok'
	id 'io.spring.dependency-management'
	id 'io.spring.javaformat'
}

sourceCompatibility = '17'

repositories {
	if (rootProject.hasProperty('repoUrlPrefix')) {
		maven {
			url "${repoUrlPrefix}/maven-public/"
			allowInsecureProtocol true
		}
	} else {
		mavenCentral()
	}
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
		mavenBom "org.testcontainers:testcontainers-bom:${property('testcontainers.version')}"
	}
	generatedPomCustomization {
		enabled = false
	}
}

dependencies {
	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.springframework.security:spring-security-test"
	testRuntimeOnly "com.h2database:h2"
	testImplementation(testFixtures(project(":cornerstone-core")))
	checkstyle("io.spring.javaformat:spring-javaformat-checkstyle:${property('javaformat-plugin.version')}")
}

configurations.all {
	resolutionStrategy.eachDependency {
		if (it.requested.name == 'spring-boot-starter-logging')
			it.useTarget "${it.requested.group}:spring-boot-starter-log4j2:${it.requested.version}"
	}
}

testing {
	suites {
		test {
			useJUnitJupiter()
		}
		integrationTest(JvmTestSuite) {
			sources {
				compileClasspath += sourceSets.test.output
				runtimeClasspath += sourceSets.test.output
			}
			dependencies {
				implementation project()
				configurations.testImplementation {
					dependencies.forEach {implementation it}
				}
				configurations.testRuntimeOnly {
					dependencies.forEach {runtimeOnly it}
				}
			}
			targets {
				all {
					testTask.configure {
						shouldRunAfter(test)
					}
				}
			}
		}
	}
}

java {
	withSourcesJar()
}

jar {
	manifest {
		 attributes(
		 	'Implementation-Title': project.name,
			'Implementation-Version': project.version,
			'Automatic-Module-Name': project.name.replace('-', '.')  // for Jigsaw
		)
	}
}

sourcesJar {
	dependsOn delombok
	from 'build/generated/sources/delombok/java/main/'
	duplicatesStrategy DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

clean {
	doLast {
		project.delete 'bin', 'logs'
	}
}

if (rootProject.hasProperty('integration')) {
	check.dependsOn integrationTest
}
